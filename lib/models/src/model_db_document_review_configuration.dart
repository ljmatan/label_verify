import 'dart:typed_data' as dart_typed_data;

import 'package:flutter/foundation.dart';
import 'package:label_verify/services/src/service_images.dart';

enum LvModelDocumentReviewConfigurationType {
  staticText,
  dynamicText,
  manualVerificationText,
  graphics;

  String get displayName {
    switch (this) {
      case LvModelDocumentReviewConfigurationType.staticText:
        return 'Static Text';
      case LvModelDocumentReviewConfigurationType.dynamicText:
        return 'Dynamic Text';
      case LvModelDocumentReviewConfigurationType.manualVerificationText:
        return 'Manual Verification Text';
      case LvModelDocumentReviewConfigurationType.graphics:
        return 'Graphical Image Display';
    }
  }
}

/// The review configuration applied to a specific document, used for future revision purposes.
///
class LvModelDocumentReviewConfiguration {
  /// Default, unnamed class constructor.
  ///
  LvModelDocumentReviewConfiguration({
    required this.id,
    required this.documentId,
    required this.page,
    required this.label,
    required this.description,
    required this.type,
    required this.positionStartPercentX,
    required this.positionStartPercentY,
    required this.positionEndPercentX,
    required this.positionEndPercentY,
  });

  /// Document review configuration identifier generated by the SQL database.
  ///
  int id;

  /// The identifer of the document specified with this review configuration.
  ///
  int documentId;

  /// The page of the document for which this review configuration is specified.
  ///
  int page;

  /// Review configuration display label.
  ///
  String label;

  /// Optional description of this review configuration.
  ///
  String? description;

  /// The specified type of the review configuration.
  ///
  LvModelDocumentReviewConfigurationType type;

  /// Start position of the specified document content,
  /// expressed as a percentage of the display media.
  ///
  double positionStartPercentX, positionStartPercentY;

  /// End position of the specified document content,
  /// expressed as a percentage of the display media.
  ///
  double positionEndPercentX, positionEndPercentY;

  /// Private property holding the value of the display image for this crop section.
  ///
  dart_typed_data.Uint8List? imageDisplay;

  /// Future that fetches the image display by cropping the [originalImage] contents
  /// according to the specified parameters.
  ///
  Future<dart_typed_data.Uint8List> getImageDisplay({
    required Uint8List originalImage,
  }) async {
    imageDisplay ??= await LvServiceImages.instance.cropImage(
      originalImage,
      positionStartPercentX,
      positionStartPercentY,
      positionEndPercentX,
      positionEndPercentY,
    );
    return imageDisplay!;
  }

  /// The ratio at which the data stored is being converted.
  ///
  static const _resolution = 10000;

  /// Factory constructor used to generate a class instance from database data format.
  ///
  factory LvModelDocumentReviewConfiguration.fromJson(Map json) {
    return LvModelDocumentReviewConfiguration(
      id: json['id'],
      documentId: json['documentId'],
      page: json['page'],
      label: json['label'],
      description: json['description'],
      type: LvModelDocumentReviewConfigurationType.values.firstWhere(
        (value) => value.name == json['type'],
      ),
      positionStartPercentX: (json['positionStartPercentX'] / _resolution) as double,
      positionStartPercentY: (json['positionStartPercentY'] / _resolution) as double,
      positionEndPercentX: (json['positionEndPercentX'] / _resolution) as double,
      positionEndPercentY: (json['positionEndPercentY'] / _resolution) as double,
    );
  }

  /// Method used for generating data in the database format.
  ///
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'documentId': documentId,
      'page': page,
      'label': label,
      'description': description,
      'type': type.name,
      'positionStartPercentX': (positionStartPercentX * _resolution).round(),
      'positionStartPercentY': (positionStartPercentY * _resolution).round(),
      'positionEndPercentX': (positionEndPercentX * _resolution).round(),
      'positionEndPercentY': (positionEndPercentY * _resolution).round(),
    };
  }
}
